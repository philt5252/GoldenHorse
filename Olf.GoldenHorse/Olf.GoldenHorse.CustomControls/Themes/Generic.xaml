<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:customControls="clr-namespace:Olf.GoldenHorse.CustomControls">
    <!-- Toggle Button -->
    <Style x:Key="ExpandCollapseToggleStyle" TargetType="ToggleButton">
        <Setter Property="Focusable" Value="False"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ToggleButton">
                    <Grid Width="15" Height="13" SnapsToDevicePixels="True">
                        <Rectangle Width="9" Height="9" Stroke="#919191" SnapsToDevicePixels="true">
                            <Rectangle.Fill>
                                <LinearGradientBrush EndPoint="0.5,2" StartPoint="0.5,0">
                                    <GradientStop Color="White" Offset="0"/>
                                    <GradientStop Color="Silver" Offset="0.5"/>
                                    <GradientStop Color="LightGray" Offset="1"/>
                                </LinearGradientBrush>
                            </Rectangle.Fill>
                        </Rectangle>
                        <Rectangle x:Name="ExpandPath" Width="1" Height="5" Stroke="Black" SnapsToDevicePixels="true"/>
                        <Rectangle Width="5" Height="1" Stroke="Black" SnapsToDevicePixels="true"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="Visibility"  TargetName="ExpandPath" Value="Collapsed"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--Converter for Indentation of items-->

    <customControls:TreeListViewConverter x:Key="TreeListViewConverter"/>

    <!--Control Template for TreeViewItem's.-->
    <ControlTemplate TargetType="TreeViewItem" x:Key="TreeListViewItem">
        <!--Grid containing the current information and the subnodes.-->
        <Grid Name="Grid1">
            <Grid.ColumnDefinitions>
                <ColumnDefinition MinWidth="19" Width="Auto"/>
                <ColumnDefinition Width="Auto"/>
                <ColumnDefinition Width="*"/>
            </Grid.ColumnDefinitions>
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="*"/>
            </Grid.RowDefinitions>

            
            <!--<ToggleButton Margin="-1,0,0,0" x:Name="Expander" Style="{StaticResource ExpandCollapseToggleStyle}" 
                                          IsChecked="{Binding IsExpanded, RelativeSource={RelativeSource Mode=FindAncestor,
                                          AncestorType=TreeViewItem}}" ClickMode="Press"/>-->
            <StackPanel Grid.Column="1" Orientation="Horizontal">
               <!-- <Image Source="\Images\dachsund.jpg" Width="15" Height="15" HorizontalAlignment="Left"></Image>-->
                <Border Name="Bd" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="True">
                    <ContentPresenter x:Name="PART_Header" ContentSource="Header" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" MinWidth="20"/>
                </Border>
            </StackPanel>
            <StackPanel>
                <!--Border wrapping the content presenter.-->
                <Border x:Name="Border">
                    <!--GridViewRowPrsenter containing the current information.-->
                    <GridViewRowPresenter Content="{TemplateBinding Header}"
                    Columns="{Binding Columns, 
                    RelativeSource={RelativeSource Mode=FindAncestor, 
                    AncestorType=customControls:TreeListView}}"/>
                </Border>
                <!--ItemsPresenter containing the subnodes-->
                <ItemsPresenter x:Name="ItemsPresenter" Visibility="Visible"/>
            </StackPanel>
        </Grid>
        <ControlTemplate.Triggers>
            <!--Trigger used to show the sub items-->
            
            <Trigger Property="IsExpanded" Value="False">
                <Setter TargetName="ItemsPresenter" Property="Visibility" Value="Collapsed"/>
            </Trigger>
            <!--Trigger used to change the color based on selection-->
            <Trigger Property="IsSelected" Value="true">
                <!--Change the background color-->
                <Setter TargetName="Border" Property="Background"
                    Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
                <!--Change the foreground color-->
                <Setter Property="Foreground" 
                    Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"/>
            </Trigger>
            <!--Trigger used to change the color based on selection-->
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsSelected" Value="true"/>
                    <Condition Property="IsSelectionActive" Value="false"/>
                </MultiTrigger.Conditions>
                <!--Change the background color-->
                <Setter TargetName="Border" Property="Background"
                    Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}"/>
                <!--Change the foreground color-->
                <Setter Property="Foreground" 
                    Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
            </MultiTrigger>
            <!--Trigger used to change the color based on the status of the item-->
            <Trigger Property="IsEnabled" Value="false">
                <!--Change the foreground color-->
                <Setter Property="Foreground" 
                    Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>


    <!--Control Template for TreeListViewExpander's.-->
    <ControlTemplate TargetType="{x:Type customControls:TreeListViewExpander}" x:Key="TreeListViewExpander">
        <StackPanel Orientation="Horizontal" x:Name="ContainerElement" Margin="0,0,0,0">
            <!--Use a FrameworkElement to indent the button-->
            <FrameworkElement Width="{Binding RelativeSource={x:Static RelativeSource.Self}, 
                Converter={StaticResource TreeListViewConverter}}"/>
            <!--Use a standard toggle button-->
            <ToggleButton Name="Expander" Style="{StaticResource ExpandCollapseToggleStyle}" IsChecked="{Binding IsExpanded, RelativeSource={RelativeSource Mode=FindAncestor,
                AncestorType=TreeViewItem}}"  VerticalAlignment="Center" HorizontalAlignment="Left"/>
        </StackPanel>
        <ControlTemplate.Triggers>
            <!--Trigger used to show/hide the expand button-->
            <DataTrigger Binding="{Binding HasItems, RelativeSource={RelativeSource Mode=FindAncestor,
                AncestorType=TreeViewItem}}" Value="False">
                <Setter TargetName="ContainerElement" Property="Visibility" Value="Hidden"/>
            </DataTrigger>
            
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <Style x:Key="BorderStyle" TargetType="Border">
        <Setter Property="BorderBrush" Value="{x:Static SystemColors.ControlDarkBrush}"></Setter>
        <Setter Property="BorderThickness" Value="0.2"></Setter>
    </Style>
    <Style x:Key="BlankBorderStyle" TargetType="Border">
        <Setter Property="BorderBrush" Value="White"></Setter>
        <Setter Property="BorderThickness" Value="0.2"></Setter>
    </Style>

    <LinearGradientBrush x:Key="HeaderBrush"  EndPoint="0,0" StartPoint="0,1">
        <GradientStop Color="DarkGray" Offset="0"/>
        <GradientStop Color="Gray" Offset="1"/>
    </LinearGradientBrush>

    <Style x:Key="GridViewColumnHeaderStyle" TargetType="{x:Type GridViewColumnHeader}">
        <Setter Property="Background" Value="{StaticResource HeaderBrush}"/>
        <Setter Property="FontSize" Value="12"></Setter>
        <Setter Property="FontWeight" Value="Bold"></Setter>
        <Setter Property="Foreground" Value="White"></Setter>
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="BorderBrush" Value="WhiteSmoke" />
        <Setter Property="BorderThickness" Value="1,1,1,1" />
    </Style>

    <!--Apply this style to all controls of type 'TreeListView'.-->
    <Style TargetType="{x:Type customControls:TreeListView}">
        <!--Set the control template.-->
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type customControls:TreeListView}">
                    <ControlTemplate.Resources>
                        <!--Apply this style to all 'TreeViewItem's.-->
                        <Style TargetType="TreeViewItem">
                            <Setter Property="Template" Value="{StaticResource TreeListViewItem}"/>
                            <Setter Property="IsExpanded" Value="True"/>
                           
                        </Style>
                        <!--Apply this style to all 'TreeListViewExpander's.-->
                        <Style TargetType="customControls:TreeListViewExpander">
                            <Setter Property="Template" Value="{StaticResource TreeListViewExpander}"/>
                        </Style>
                 
                    </ControlTemplate.Resources>
                    <!--Create a standard border around the 'TreeListView'.-->
                    <Border Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}">
                        <!--ScrollViewer providing horizontal scrolling functionality 
                        for both, content and headers.-->
                        <ScrollViewer HorizontalScrollBarVisibility="Auto"
                                      VerticalScrollBarVisibility="Disabled" >
                            <!--Grid containing the header row and all the content rows.-->
                            <Grid>
                                <Grid.RowDefinitions>
                                    <!--The header row.-->
                                    <RowDefinition Height="Auto"/>
                                    <!--The content row.-->
                                    <RowDefinition Height="*"/>
                                </Grid.RowDefinitions>
                                <!--The header row.-->
                                <GridViewHeaderRowPresenter Columns="{TemplateBinding Columns}"
                                  AllowsColumnReorder="{TemplateBinding AllowsColumnReorder}" 
                                    ColumnHeaderContainerStyle="{StaticResource GridViewColumnHeaderStyle}" >
                                </GridViewHeaderRowPresenter>
                                <!--ScrollViewer providing vertical scrolling
                                functionality for the content.-->
                                <ScrollViewer HorizontalScrollBarVisibility="Disabled"
                                              VerticalScrollBarVisibility="Auto"
                                              Grid.Row="1">
                                    <!--ItemsPresenter containing the content.-->
                                    <ItemsPresenter/>
                                </ScrollViewer>
                            </Grid>
                        </ScrollViewer>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
</ResourceDictionary>
